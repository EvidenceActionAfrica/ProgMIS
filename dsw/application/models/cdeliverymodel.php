<?phpclass cdeliverymodel extends Database {    /**     * Every model needs a database connection, passed to the model     * @param object $db A PDO database connection     * */    function __construct($db) {        try {            $this->db = $db;        } catch (PDOException $e) {            exit('Database connection could not be established.');        }    }    public function getData($table, $filds, $params) {        $this->selectDB($table, $filds, $params);        $edited = $this->count();        return $edited;    }    public function getPrograms() {        $query = 'SELECT        waterpoint_details.program,         COUNT(waterpoint_details.program) AS `number_of_water_points` ,        cdelivery_details.waterpoints_per_csa_per_day,        cdelivery_details.jerrycans_per_delivery,        cdelivery_details.start_date,        cdelivery_details.fuel_cost_per_csa        FROM waterpoint_details         LEFT JOIN cdelivery_details ON cdelivery_details.program = waterpoint_details.program        WHERE waterpoint_details.program !="" AND waterpoint_details.country = :country GROUP BY waterpoint_details.program ORDER BY waterpoint_details.program';        $bind = array(            ':country' => $_SESSION['country']        );        $programs = $this->selectDBraw($query, $bind);        return $programs;    }    public function getProgram($program) {        $query = 'SELECT            waterpoint_details.program,             COUNT(waterpoint_details.program) AS number_of_water_points,            cdelivery_details.waterpoints_per_csa_per_day,            cdelivery_details.jerrycans_per_delivery,            cdelivery_details.start_date,            cdelivery_details.fuel_cost_per_csa            FROM waterpoint_details             LEFT JOIN cdelivery_details ON cdelivery_details.program = waterpoint_details.program            WHERE waterpoint_details.program = :program';        $dind = array(            ':program' => $program        );        $programs = $this->selectDBraw($query, $dind);        return $programs;    }    public function getCsa($table, $fields, $params) {        $csa = $this->selectDB($table, $fields, $params);        return $csa;    }    public function getWaterpointDetails($admin_territory, $program) {        $program_array = explode('/', $_GET['url']);        $program = $program_array[2];        $query = 'SELECT id            FROM admin_territory            WHERE territory_name = :admin_territory AND country_id = ' . $_SESSION['country'] . '        ';        $bind = array(':admin_territory' => 'village');        $village_territory_id = $this->selectDBraw($query, $bind)[0]['id'];        $query = 'SELECT id            FROM admin_territory            WHERE territory_name = :admin_territory AND country_id = ' . $_SESSION['country'] . '        ';        $bind = array(':admin_territory' => $admin_territory);        $admin_territory_id = $this->selectDBraw($query, $bind)[0]['id'];        $query = 'SELECT            territory_name,             territory_level            FROM admin_territory            WHERE id <= ' . $village_territory_id . ' AND id >= ' . $admin_territory_id . ' AND country_id = ' . $_SESSION['country'] . ' ORDER BY territory_level DESC        ';        $ancestors = $this->selectDBraw($query);        // Lake victoria        $latitude = '-0.607572';        $longitude = '33.440312';        $query = 'SELECT ';        $query .= 'waterpoint_details.id,                waterpoint_details.program,';        $i = 1;        foreach ($ancestors as $key => $ancestor) {            $query .= 't' . $i . '.admin_territory_name AS ' . $ancestor['territory_name'] . ', ';            $i++;        }        $query .= 'waterpoint_details.waterpoint_name,                waterpoint_details.waterpoint_id,                waterpoint_details.latitude,                waterpoint_details.longitude,                (((acos(sin((' . $latitude . '*pi()/180))*sin((waterpoint_details.latitude*pi()/180))+cos((' . $latitude . '*pi()/180))*cos((waterpoint_details.latitude*pi()/180))*cos(((' . $longitude . '-waterpoint_details.longitude)*pi()/180))))*180/pi())*60*1.1515) as distance,                CASE WHEN cdelivery_waterpoints.date IS NOT NULL THEN cdelivery_waterpoints.date ELSE cdelivery_details.start_date END AS start_date,                cdelivery_details.jerrycans_per_delivery as default_jerrycans_per_delivery,                cdelivery_waterpoints.jerrycans_per_delivery as actual_jerrycans_per_delivery,                cdelivery_waterpoints.spot_check,                cdelivery_waterpoints.dispenser_problem,                cdelivery_waterpoints.problem_recorded                FROM cdelivery_details                JOIN waterpoint_details ON waterpoint_details.program = cdelivery_details.program                LEFT JOIN cdelivery_waterpoints ON cdelivery_waterpoints.wp_details_id = waterpoint_details.id                JOIN admin_territory_details as t1 ON t1.id = waterpoint_details.village';        $j = 2;        foreach ($ancestors as $key => $ancestor) {            $query .= ' LEFT JOIN admin_territory_details AS t' . $j . ' ON t' . $j . '.id = t' . ($j - 1) . '.territory_parent ';            $j++;        }        $query .= ' WHERE cdelivery_details.country = :country AND waterpoint_details.program = :program ORDER BY ' . $admin_territory . ', distance ASC';        $bind = array(            ':country' => $_SESSION['country'],            ':program' => $program        );        $waterpointdetails = $this->selectDBraw($query, $bind);        return $waterpointdetails;    }    public function getWaterpointDetailsCAU($admin_territory, $program, $cau) {        $program_array = explode('/', $_GET['url']);        $program = $program_array[2];        $query = 'SELECT id            FROM admin_territory            WHERE territory_name = :admin_territory AND country_id = ' . $_SESSION['country'] . '        ';        $bind = array(':admin_territory' => 'village');        $village_territory_id = $this->selectDBraw($query, $bind)[0]['id'];        $query = 'SELECT id            FROM admin_territory            WHERE territory_name = :admin_territory AND country_id = ' . $_SESSION['country'] . '        ';        $bind = array(':admin_territory' => $admin_territory);        $admin_territory_id = $this->selectDBraw($query, $bind)[0]['id'];        $query = 'SELECT            territory_name,             territory_level            FROM admin_territory            WHERE id <= ' . $village_territory_id . ' AND id >= ' . $admin_territory_id . ' AND country_id = ' . $_SESSION['country'] . ' ORDER BY territory_level DESC        ';        $ancestors = $this->selectDBraw($query);        // Lake victoria        $latitude = '-0.607572';        $longitude = '33.440312';        $query = 'SELECT ';        $query .= 'waterpoint_details.id,                waterpoint_details.program,';        $i = 1;        foreach ($ancestors as $key => $ancestor) {            $query .= 't' . $i . '.admin_territory_name AS ' . $ancestor['territory_name'] . ', ';            $i++;        }        $query .= 'waterpoint_details.waterpoint_name,                waterpoint_details.waterpoint_id,                waterpoint_details.latitude,                waterpoint_details.longitude,                (((acos(sin((' . $latitude . '*pi()/180))*sin((waterpoint_details.latitude*pi()/180))+cos((' . $latitude . '*pi()/180))*cos((waterpoint_details.latitude*pi()/180))*cos(((' . $longitude . '-waterpoint_details.longitude)*pi()/180))))*180/pi())*60*1.1515) as distance,                CASE WHEN cdelivery_waterpoints.date IS NOT NULL THEN cdelivery_waterpoints.date ELSE cdelivery_details.start_date END AS start_date,                cdelivery_details.jerrycans_per_delivery as default_jerrycans_per_delivery,                cdelivery_waterpoints.jerrycans_per_delivery as actual_jerrycans_per_delivery,                cdelivery_waterpoints.spot_check,                cdelivery_waterpoints.dispenser_problem,                cdelivery_waterpoints.problem_recorded                FROM cdelivery_details                JOIN waterpoint_details ON waterpoint_details.program = cdelivery_details.program                LEFT JOIN cdelivery_waterpoints ON cdelivery_waterpoints.wp_details_id = waterpoint_details.id                JOIN admin_territory_details as t1 ON t1.id = waterpoint_details.village';        $j = 2;        foreach ($ancestors as $key => $ancestor) {            $query .= ' LEFT JOIN admin_territory_details AS t' . $j . ' ON t' . $j . '.id = t' . ($j - 1) . '.territory_parent ';            $j++;        }        $query .= ' WHERE cdelivery_details.country = :country AND waterpoint_details.program = :program ';        $m = $i - 1;        $query .= 'AND t' . $m . '.admin_territory_name = "' . $cau . '" ';        $query .= ' ORDER BY ' . $admin_territory . ', distance ASC';        $bind = array(            ':country' => $_SESSION['country'],            ':program' => $program        );        $waterpointdetails = $this->selectDBraw($query, $bind);        return $waterpointdetails;    }    public function totalWaterpoints($program) {        $totalWaterpoints = $this->selectDB('waterpoint_details', $filds = array('COUNT(id)'), $params = array('program' => $program));        return $totalWaterpoints;    }    public function addWaterpoints($table, $data) {        $added = $this->insertdDB($table, $data);        return $added;    }    public function deleteData($table, $id) {        $dd = $this->deleteDB($table, $id);    }    public function editWaterpoints($data) {        $cdelivery_details = $this->selectDB('cdelivery_details', $filds = null, $params = array('program' => $data['program']))[0];        if (!empty($cdelivery_details)) {            $this->updateDB('cdelivery_details', $data, $cdelivery_details['id']);        } else {            $this->addWaterpoints('cdelivery_details', $data);        }    }    public function editExpenditureCsa($amount, $csa, $date) {        $query = 'SELECT amount from cdelivery_csa_daily_spend WHERE country = ' . $_SESSION['country'] . ' AND csa = "' . $csa . '" AND date = "' . $date . '"';        $data = $this->selectDBraw($query);        if (sizeof($data) > 0) {            $data_update = array('amount' => $amount);            $params = array('country' => $_SESSION['country'], 'csa' => $csa, 'date' => $date);            $this->updateDBparams('cdelivery_csa_daily_spend', $data_update, $params);        } else {            $data_add = array('amount' => $amount, 'country' => $_SESSION['country'], 'csa' => $csa, 'date' => $date);            $this->insertdDB('cdelivery_csa_daily_spend', $data_add);        }    }    public function updateWaterpoints($table, $data, $params) {        $updated = $this->updateDBparams($table, $data, $params);        return $updated;    }    public function getExpenditureDetails() {        $query = 'SELECT                cdelivery_waterpoints.id,                cdelivery_waterpoints.csa,                IF(cdelivery_waterpoints.jerrycans_per_delivery,cdelivery_waterpoints.jerrycans_per_delivery,cdelivery_details.jerrycans_per_delivery) AS jerrycans_per_delivery,                cdelivery_waterpoints.date,                SUM(cdelivery_details.fuel_cost_per_csa) AS total_money_received,                count(*) AS total_deliveries_made                FROM cdelivery_waterpoints                LEFT JOIN waterpoint_details ON waterpoint_details.id = cdelivery_waterpoints.wp_details_id                LEFT JOIN cdelivery_details ON cdelivery_details.program = waterpoint_details.program                WHERE cdelivery_waterpoints.csa != "" AND cdelivery_waterpoints.country = :country                GROUP BY cdelivery_waterpoints.date,cdelivery_waterpoints.csa                ';        $bind = array(            ':country' => $_SESSION['country']        );        $expenditure_details = $this->selectDBraw($query, $bind);        return $expenditure_details;    }    public function getExpenditureCsa($csa, $date) {        $csa_format = str_replace(" ", "", $csa);        $query = 'SELECT amount from cdelivery_csa_daily_spend WHERE country = ' . $_SESSION['country'] . ' AND csa = "' . $csa_format . '" AND date = "' . $date . '"';        $data = $this->selectDBraw($query);        if (sizeof($data) > 0) {            return $data[0]['amount'];        }    }    public function getArchiveTable() {        $query = 'SELECT name from archieve WHERE  country = ' . $_SESSION['country'];        $data = $this->selectDBraw($query);        return $data;    }    public function getArchive($table) {        $query = 'SELECT * from ' . $table;        $data = $this->selectDBraw($query);        return $data;    }    public function addArchiveTable($program, $cycle) {        $table = 'archieve';        $name = 'Archive_saved_on_' . date('d_M_Y') . '_for_' . $program . '_cycle_' . $cycle;        $query = 'SELECT name from archieve WHERE  country = ' . $_SESSION['country'] . ' AND name = "' . $name . '"';        $data = $this->selectDBraw($query);        if (sizeof($data) > 0) {            return 'error';        } else {            $data_insert = array(                'id' => '',                'name' => $name,                'country' => $_SESSION['country']            );            $this->insertdDB($table, $data_insert);            switch ($_SESSION['country']) {                case 1:                    $admin_territory = 'sub_location';                    break;                case 2:                    $admin_territory = 'parish';                    break;                case 3:                    $admin_territory = 'health_center';                    break;            }            $waterpoint_details = $this->getWaterpointDetails($admin_territory, $program);            $query = 'CREATE TABLE ' . $name . '( ';            foreach ($waterpoint_details[0] as $key => $value) {                if ($key != 'id' && $key != 'latitude' && $key != 'longitude' && $key != 'distance') {                    $query.= $key . ' VARCHAR(50) ,';                }            }            $query.='CSA VARCHAR(50), Number_of_Chlorine_deliveries_on_server  VARCHAR(50), Number_of_spot_checks_on_server VARCHAR(50) )';            $this->selectDBraw($query);            $query = 'INSERT INTO ' . $name . ' VALUES';            foreach ($waterpoint_details as $key => $value) {                $assigned_csas = $this->getCsa('cdelivery_waterpoints', $filds = array('wp_details_id', 'csa'), $params = null);                foreach ($assigned_csas as $key => $value_) {                    $assigned_csas_new[$value_['wp_details_id']] = $value_;                }                if (isset($assigned_csas_new[$value['id']])) {                    $assigned_csa = $assigned_csas_new[$value['id']]['csa'];                } else {                    $assigned_csa = '';                }                $getodkdata = $this->getOdkDataRetrieve('odk_data_chlorine', $program);                $j = 0;                for ($i = 0; $i < sizeof($getodkdata); $i++) {                    if ($value['waterpoint_id'] == $getodkdata[$i]['waterpoint_id']) {                        $j++;                    }                }                $query.='(';                foreach ($value as $key2 => $value2) {                    if ($key2 != 'id' && $key2 != 'latitude' && $key2 != 'longitude' && $key2 != 'distance') {                        $query.='"' . $value2 . '",';                    }                }                $query.='"' . $assigned_csa . '", "' . $j . '", "' . $j . '"';                $query.='),';            }            $query = rtrim($query, ',');            $this->selectDBraw($query);        }    }    public function deletetablename($table) {        $query = 'DELETE from archieve WHERE  country = ' . $_SESSION['country'] . ' AND name = "' . $table . '"';        $this->selectDBraw($query);        $query = 'DROP TABLE' . $table;        $this->selectDBraw($query);        return 'success';    }    public function insertTrackingDate($date, $program) {        $count = $this->getData('cdelivery_tracking', $filds = array('id'), $params = array('date' => $date, 'program' => $program, 'country' => $_SESSION['country']));        if ($count > 0) {            $this->updateDBparams($table = 'cdelivery_tracking', $data = array('date' => $date, 'program' => $program), $params = array('date' => $date, 'program' => $program, 'country' => $_SESSION['country']));        } else {            $this->insertdDB($table = 'cdelivery_tracking', $data = array('date' => $date, 'program' => $program, 'country' => $_SESSION['country']));        }    }    public function getOdkData($table, $program) {        $query = 'SELECT * from ' . $table . ' WHERE program = "' . $program . '"';        $data = $this->selectDBraw($query);        return $data;    }    public function getTrackingDetails() {        $dates = $this->selectDB($table = 'cdelivery_waterpoints', $fields = array('DISTINCT date'), $params = array('country' => $_SESSION['country']));        $data = array();        $i = 1;        $new_data = array();        if (!empty($dates)) {            foreach ($dates as $key => $value) {                $program = $this->selectDB($table = 'cdelivery_waterpoints', $fields = array('DISTINCT program'), $params = array('date' => $value['date'], 'country' => $_SESSION['country']));                foreach ($program as $key => $value1) {                    $tracking_details = $this->selectDB(                            $table = 'cdelivery_tracking', $fields = null, $params = array(                        'date' => $value['date'], 'program' => $value1['program']                            )                    );                    if (empty($tracking_details)) {                        continue;                    } else {                        $tracking_details = $tracking_details[0];                    }                    $query = 'SELECT wp_details_id,  spot_check,  jerrycans_per_delivery                FROM cdelivery_waterpoints                WHERE cdelivery_waterpoints.date = :date                AND program  = :program ';                    $bind = array(                        ':date' => $value['date'],                        ':program' => $value1['program']                    );                    $program_array = $this->selectDBraw($query, $bind);                    if (sizeof($program_array) > 0 && $value1['program'] != '') {                        $yes_spot_check = 0;                        $sum_jericans = 0;                        $no_refills = 0;                        foreach ($program_array as $key => $value2) {                            if (($value2['spot_check'] == 'YES') || ($value2['spot_check'] == 'Yes') || ($value2['spot_check'] == 'yes')) {                                $yes_spot_check++;                            }                            $sum_jericans += $value2['jerrycans_per_delivery'];                            $no_refills++;                        }                        $data[$i] = array(                            'id' => $tracking_details['id'],                            'date' => $tracking_details['date'],                            'program' => $value1['program'],                            'spot_checks' => $yes_spot_check,                            'no_refills_delivered' => $sum_jericans * 3,                            'no_of_waterpoints' => $no_refills,                            'kms_covered' => $tracking_details['kms_covered'],                            'delivery_status' => $tracking_details['delivery_status']                        );                        array_push($new_data, $data[$i]);                        $i++;                    }                }            }            return $new_data;        } else {            return null;        }    }    public function addData($table, $data) {        $dd = $this->insertdDB($table, $data);    }    public function getOdkDataRetrieve($table, $program) {        $query = 'SELECT waterpoint_id from ' . $table . ' WHERE country = "' . $_SESSION['country'] . '" AND program = "' . $program . '"';        $data = $this->selectDBraw($query);        return $data;    }    public function deleteProg($table, $program) {//        $query = 'DELETE FROM ' . $table . ' WHERE country = ' . $_SESSION['country'] . ' AND program="' . $program . '"';        $this->deleteDB($table, array('program' => $program));    }    public function importTrackingData($csv) {        foreach ($csv as $key => $value) {            $query = 'SELECT id                FROM waterpoint_details                WHERE waterpoint_id = :waterpoint_id            ';            $bind = array(                ':waterpoint_id' => $value[0]            );            $wp_details_id = $this->selectDBraw($query, $bind);            if (!empty($wp_details_id)) {                $wp_details_id = $wp_details_id[0]['id'];                $data = array(                    'csa' => $value[6],                    'jerrycans_per_delivery' => $value[2],                    'date' => $value[1],                    'spot_check' => $value[3],                    'dispenser_problem' => $value[4],                    'problem_recorded' => $value[5]                );                $params = array(                    'wp_details_id' => $wp_details_id                );                $updated = $this->updateDBparams('cdelivery_waterpoints', $data, $params, $operator = 'AND');            }        }    }}?>